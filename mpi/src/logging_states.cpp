#include <mpe.h>

#include "logging_states.hpp"


int INFERENCE_INIT_START, INFERENCE_INIT_END;

int INFERENCE_ON2VN_START, INFERENCE_ON2VN_END;
int ON2VN_SEND_ACTIVATIONS_START, ON2VN_SEND_ACTIVATIONS_END;
int ON2VN_UPDATE_VNS_ACTIVATED_BY_ONS_START, ON2VN_UPDATE_VNS_ACTIVATED_BY_ONS_END;
int ON2VN_FIND_OWN_STARTING_POINTS_START, ON2VN_FIND_OWN_STARTING_POINTS_END;
int ON2VN_DISTRIBUTE_VN_STARTING_POINTS_START, ON2VN_DISTRIBUTE_VN_STARTING_POINTS_END;
int ON2VN_CALCULATE_VN_ACTIVATIONS_START, ON2VN_CALCULATE_VN_ACTIVATIONS_END;
int ON2VN_FREE_MEMORY_START, ON2VN_FREE_MEMORY_END;

int SEND_ACTIVATIONS_SEND_VNG_START, SEND_ACTIVATIONS_SEND_VNG_END;
int SEND_ACTIVATIONS_SEND_SINGLE_ON_START, SEND_ACTIVATIONS_SEND_SINGLE_ON_END;

int INFERENCE_VN2ON_START, INFERENCE_VN2ON_END;


void init_events()
{
    // ***************************** INIT INFERENCE *****************************
    MPE_Log_get_state_eventIDs(&INFERENCE_INIT_START, &INFERENCE_INIT_END);
    MPE_Describe_state(INFERENCE_INIT_START, INFERENCE_INIT_END, "Inference: init", "red");

    // ***************************** ON 2 VN *****************************
    MPE_Log_get_state_eventIDs(&INFERENCE_ON2VN_START, &INFERENCE_ON2VN_END);
    MPE_Describe_state(INFERENCE_ON2VN_START, INFERENCE_ON2VN_END, "Inference: on2vn", "green");

    MPE_Log_get_state_eventIDs(&ON2VN_SEND_ACTIVATIONS_START, &ON2VN_SEND_ACTIVATIONS_END);
    MPE_Describe_state(ON2VN_SEND_ACTIVATIONS_START, ON2VN_SEND_ACTIVATIONS_END, "On2vn: send_activations_from_on_to_vn", "white");

    MPE_Log_get_state_eventIDs(&ON2VN_UPDATE_VNS_ACTIVATED_BY_ONS_START, &ON2VN_UPDATE_VNS_ACTIVATED_BY_ONS_END);
    MPE_Describe_state(ON2VN_UPDATE_VNS_ACTIVATED_BY_ONS_START, ON2VN_UPDATE_VNS_ACTIVATED_BY_ONS_END, "On2vn: update_vns_activated_by_ons", "yellow");

    MPE_Log_get_state_eventIDs(&ON2VN_FIND_OWN_STARTING_POINTS_START, &ON2VN_FIND_OWN_STARTING_POINTS_END);
    MPE_Describe_state(ON2VN_FIND_OWN_STARTING_POINTS_START, ON2VN_FIND_OWN_STARTING_POINTS_END, "On2vn: find_own_starting_points", "orange");

    MPE_Log_get_state_eventIDs(&ON2VN_DISTRIBUTE_VN_STARTING_POINTS_START, &ON2VN_DISTRIBUTE_VN_STARTING_POINTS_END);
    MPE_Describe_state(ON2VN_DISTRIBUTE_VN_STARTING_POINTS_START, ON2VN_DISTRIBUTE_VN_STARTING_POINTS_END, "On2vn: distribute_vn_starting_points", "purple");

    MPE_Log_get_state_eventIDs(&ON2VN_CALCULATE_VN_ACTIVATIONS_START, &ON2VN_CALCULATE_VN_ACTIVATIONS_END);
    MPE_Describe_state(ON2VN_CALCULATE_VN_ACTIVATIONS_START, ON2VN_CALCULATE_VN_ACTIVATIONS_END, "On2vn: calculate_vn_activations", "brown");

    MPE_Log_get_state_eventIDs(&ON2VN_FREE_MEMORY_START, &ON2VN_FREE_MEMORY_END);
    MPE_Describe_state(ON2VN_FREE_MEMORY_START, ON2VN_FREE_MEMORY_END, "On2vn: free_mem_for_starting_points", "gray");


    MPE_Log_get_state_eventIDs(&SEND_ACTIVATIONS_SEND_VNG_START, &SEND_ACTIVATIONS_SEND_VNG_END);
    MPE_Describe_state(SEND_ACTIVATIONS_SEND_VNG_START, SEND_ACTIVATIONS_SEND_VNG_END, "Send activations: send ons to vns from single ON", "violet");

    MPE_Log_get_state_eventIDs(&SEND_ACTIVATIONS_SEND_SINGLE_ON_START, &SEND_ACTIVATIONS_SEND_SINGLE_ON_END);
    MPE_Describe_state(SEND_ACTIVATIONS_SEND_SINGLE_ON_START, SEND_ACTIVATIONS_SEND_SINGLE_ON_END, "Send activations: send single ON->VN transmission", "cyan");

    // ***************************** VN 2 ON *****************************
    MPE_Log_get_state_eventIDs(&INFERENCE_VN2ON_START, &INFERENCE_VN2ON_END);
    MPE_Describe_state(INFERENCE_VN2ON_START, INFERENCE_VN2ON_END, "Inference: vn2on", "blue");
}
